name: Steam游戏更新监控

on:
  schedule:
    - cron: '0 */12 * * *'  # 每12小时UTC时间检查一次
  workflow_dispatch:        # 允许手动触发

jobs:
  monitor:
    runs-on: ubuntu-latest
    permissions:
      contents: write      # 必需的文件写入权限
      pull-requests: none  # 明确禁用不需要的权限
      issues: none
      packages: none

    steps:
    # 步骤1：检出代码（带深度克隆）
    - name: 检出仓库
      uses: actions/checkout@v4
      with:
        fetch-depth: 0      # 获取完整提交历史
        ref: ${{ github.ref }}  # 动态获取当前分支

    # 步骤2：设置Python环境
    - name: 设置Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: "pip"       # 启用pip缓存加速

    # 步骤3：安装依赖（带缓存）
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install feedparser requests python-dateutil
        echo "依赖安装完成"

    # 步骤4：运行监控脚本
    - name: 执行监控
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        python steam_monitor.py
        echo "监控脚本执行完成"

    # 步骤5：智能提交与推送（核心改进）
    - name: 同步变更
      run: |
        # 配置Git身份
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

        # 检查是否有实际变更
        git add .
        if git diff --cached --quiet; then
          echo "没有检测到变更"
          exit 0
        fi

        # 获取当前分支名
        BRANCH=$(git rev-parse --abbrev-ref HEAD)
        echo "当前分支: $BRANCH"

        # 创建带时间戳的提交信息
        TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        COMMIT_MSG="自动更新: 游戏版本状态 [$TIMESTAMP] [skip ci]"

        # 提交变更（允许空提交）
        git commit -m "$COMMIT_MSG" || echo "提交可能为空"

        # 安全推送（带重试机制）
        for i in {1..3}; do
          echo "尝试推送 (第 $i 次)..."
          git pull --rebase origin $BRANCH && \
          git push origin $BRANCH && {
            echo "推送成功"
            break
          } || sleep 5
        done

        # 如果推送失败，使用安全强制推送
        if [ $? -ne 0 ]; then
          echo "标准推送失败，尝试安全强制推送..."
          git push origin $BRANCH --force-with-lease
        fi

        # 最终状态检查
        if [ $? -eq 0 ]; then
          echo "变更已成功同步"
        else
          echo "错误: 无法同步变更"
          exit 1
        fi
